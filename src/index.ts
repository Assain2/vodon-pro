import { app, BrowserWindow, session, protocol, ipcMain, Menu, dialog } from "electron";

import ffprobeInstaller from "@ffprobe-installer/ffprobe";
import pathToFfmpeg from "ffmpeg-static";

import ffmpeg from "fluent-ffmpeg";

import { promises as fs } from "fs";
import path from "path";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any;

ffmpeg.setFfprobePath(ffprobeInstaller.path);
ffmpeg.setFfmpegPath(pathToFfmpeg);

let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1280,
    height: 1024,
    title: "Vodon Pro",
    webPreferences: {
      webSecurity: false,
      devTools: !app.isPackaged,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // Setup the menus
  const template: Electron.MenuItemConstructorOptions[] = [
    {
      role: "fileMenu",
      submenu: [
        {
          label: "Load project",
          async click() {
            const result = await dialog.showOpenDialog(mainWindow, {
              properties: ["openFile"],
              filters: [{ name: "JSON", extensions: ["json"] }],
            });

            if (result.canceled === false) {
              const contents = await fs.readFile(result.filePaths[0]);
              mainWindow.webContents.send("onLoadProjectRequest", contents.toString());
            }
          },
        },
        {
          label: "Save project as...",
          async click() {
            const result = await dialog.showOpenDialog(mainWindow, {
              properties: ["openFile", "promptToCreate"],
              filters: [{ name: "JSON", extensions: ["json"] }],
            });

            if (result.canceled === false) {
              mainWindow.webContents.send("onSaveProjectRequest", result.filePaths[0]);
            }
          },
        },
      ],
    },
  ];

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

/**
 * Get the current app version
 */
ipcMain.handle("app:getVersion", async (event) => {
  return app.getVersion();
});

/**
 * Saves the given project (string'd json) to the supplied filePath
 */
ipcMain.handle("app:saveProject", async (event, filePath: string, project: string) => {
  return await fs.writeFile(filePath, project);
});

/**
 * Use ffprobe to find information about the given video
 */
ipcMain.handle("video:getMetadata", async (event, filePath: string) => {
  const metadata = await new Promise((resolve, reject) => {
    ffmpeg.ffprobe(filePath, function (err: any, metadata: any) {
      resolve(metadata);
    });
  });

  return metadata;
});

/**
 * True if the video (filePath really) exists in the following location
 */
ipcMain.handle("video:exists", async (event, filePath: string) => {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
});

/**
 * Generates thumbnails on the given video (using id + filePath)
 */
ipcMain.handle("video:generateThumbnails", async (event, { id, filePath }: VideoGenerateThumbnailOptions) => {
  const basename = path.basename(filePath, path.extname(filePath));
  const assetsDir = path.join(path.dirname(filePath), `${basename}_vodon`);
  const thumbnailsDir = path.join(assetsDir, "thumbnails");

  await fs.mkdir(thumbnailsDir, { recursive: true });

  ffmpeg(filePath)
    .complexFilter("fps=1")
    .outputOptions(["-qscale:v 10"])
    .on("error", function (err: any, stdout: any, stderr: any) {
      console.error("Cannot process video: " + err.message);
    })
    .on("progress", function (progress: any) {
      mainWindow.webContents.send("onVideoThumbnailGenerationProgress", {
        id,
        percent: Math.round(progress.percent),
        thumbnailsDir,
      });
    })
    .on("end", function (stdout: any, stderr: any) {
      mainWindow.webContents.send("onVideoThumbnailGenerationProgress", { id, percent: 100, thumbnailsDir });
    })
    .save(path.join(thumbnailsDir, `%04d.jpg`));
});

// allow local videos
protocol.registerSchemesAsPrivileged([
  {
    scheme: "file",
    privileges: {
      standard: true,
      bypassCSP: true,
      allowServiceWorkers: true,
      supportFetchAPI: true,
      corsEnabled: true,
      stream: true,
    },
  },
]);
